voce adicionou um bot√£o para copiar para a √°rea de transferencia em:
Combina√ß√µes Encontradas
Preciso de um bot√£o igual para Gerar Palpites
Palpites para a Mega Sena (Total: ) 
preciso de um bot√£o no final quando criar os palpites.. para copiar para a area de transfer√™ncia

OBS: N√ÉO POSTEI TODOS OS ARQUIVOS DA APP AQUI POIS HA LIMITA√á√ïES.. 


eu fiz as altera√ß√µes mas o bot√£o n√£o aparece verifique para mim onde est√° o erro e traga como implementar




Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Combinacoes\Combinacao-I


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        23/02/2025     05:58                Requisitos
d-----        01/03/2025     12:00                templates
d-----        23/02/2025     05:58                static
d-----        01/03/2025     12:29                logs
d-----        23/02/2025     05:58                venv
d-----        01/03/2025     06:53                __pycache__
------        23/02/2025     05:15           1096 LICENSE
------        23/02/2025     06:52              0 README.md
------        23/02/2025     06:41          10138 combinacaoI.ps1
------        01/03/2025     12:06          15561 app.py
------        01/03/2025     07:44           1454 requirements.txt
------        01/03/2025     07:24            555 .env
------        27/02/2025     05:43            221 .gitignore
------        01/03/2025     06:31           6069 paralelizacao.py
------        01/03/2025     06:31           3796 gospers_hack.py
------        28/02/2025     15:18           1110 celery_config.py
------        28/02/2025     14:23           7180 celery_tasks.py
------        01/03/2025     06:07           3868 socketio_server.py
------        01/03/2025     06:32           1267 supervisord.conf
------        01/03/2025     07:24            520 redis_config.py
------        01/03/2025     07:36            865 start_servers.bat

from flask import Flask, render_template, request, jsonify, url_for
from dotenv import load_dotenv, find_dotenv
import itertools
from typing import List, Set
import logging
from logging.handlers import RotatingFileHandler
import os
import random
import redis
import time  # Para o caso de uso de sleep no c√≥digo


# Tenta encontrar e carregar o arquivo .env
dotenv_path = find_dotenv()
if not dotenv_path:
    print("‚ùå ERRO: Arquivo .env n√£o encontrado!")
else:
    print(f"‚úÖ Arquivo .env encontrado: {dotenv_path}")
    load_dotenv(dotenv_path)

# Pegando a URL do Redis
REDIS_URL = os.getenv("REDIS_URL")

print(f"üîç REDIS_URL: {REDIS_URL}")  # Deve exibir a URL do Redis, n√£o None!

if not REDIS_URL:
    print("‚ùå ERRO: REDIS_URL n√£o foi carregada! Verifique o .env ou defina manualmente.")
    exit(1)  # Encerra o programa se a vari√°vel n√£o foi carregada corretamente

try:
    # Criando a conex√£o com o Redis
    redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True)
    
    # Testando a conex√£o
    redis_client.ping()
    print("‚úÖ Conex√£o com o Redis estabelecida com sucesso!")

except Exception as e:
    print(f"‚ùå Erro ao conectar ao Redis: {type(e).__name__} - {e}")








app = Flask(__name__)

# Configura√ß√£o de logs
if not os.path.exists('logs'):
    os.mkdir('logs')
file_handler = RotatingFileHandler('logs/combinacoes.log', maxBytes=10240, backupCount=10)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
))
file_handler.setLevel(logging.INFO)
app.logger.addHandler(file_handler)
app.logger.setLevel(logging.INFO)
app.logger.info('Iniciando aplica√ß√£o de combina√ß√µes')

def gerar_combinacoes(numeros: List[int], tamanho: int) -> Set[tuple]:
    """
    Gera combina√ß√µes normais e adiciona combina√ß√µes g√™meas.
    """
    # Gerar combina√ß√µes normais usando permuta√ß√µes dos n√∫meros originais
    combinacoes = set(itertools.permutations(numeros, tamanho))
    
    # Adicionar combina√ß√µes g√™meas (onde os dois d√≠gitos s√£o iguais)
    for num in numeros:
        if 1 <= num <= 9:
            gemeo = (num, num)  # Por exemplo, (1,1) para formar "11"
            combinacoes.add(gemeo)
    
    return combinacoes

def formatar_numero(combinacao: tuple) -> str:
    """Formata uma combina√ß√£o como uma string de d√≠gitos concatenados."""
    return "".join(map(str, combinacao))

@app.route("/")
def index():
    socketio_url = f"http://{request.host.split(':')[0]}:10001"
    return render_template("index.html", socketio_url=socketio_url)


@app.route("/calcular", methods=["POST"])
def calcular():
    try:
        dados = request.get_json()
        numeros_str = dados.get("numeros", "")
        tamanho = int(dados.get("tamanho", 0))
        
        app.logger.info(f'Calculando combina√ß√µes para n√∫meros: {numeros_str}, tamanho: {tamanho}')
        
        # Valida√ß√£o dos dados
        if not numeros_str or tamanho < 1:
            app.logger.warning('Dados inv√°lidos recebidos')
            return jsonify({"erro": "Dados inv√°lidos"}), 400
        
        # Validar d√≠gitos √∫nicos
        valido, msg_erro = validar_digitos_unicos(numeros_str)
        if not valido:
            app.logger.warning(f'Valida√ß√£o de d√≠gitos falhou: {msg_erro}')
            return jsonify({"erro": msg_erro}), 400
        
        # Processamento dos n√∫meros - agora garantimos que s√£o d√≠gitos √∫nicos
        numeros = [int(n.strip()) for n in numeros_str.split(",") if n.strip()]
        
        # C√°lculo das combina√ß√µes
        combinacoes = gerar_combinacoes(numeros, tamanho)
        combinacoes_formatadas = [formatar_numero(c) for c in combinacoes]
        
        # Filtrar combina√ß√µes que resultam em n√∫meros maiores que 60 (limite da Mega Sena)
        combinacoes_filtradas = []
        for comb in combinacoes_formatadas:
            try:
                num = int(comb)
                if 1 <= num <= 60:  # Intervalo v√°lido para Mega Sena
                    combinacoes_filtradas.append(comb)
            except ValueError:
                pass  # Ignorar valores que n√£o podem ser convertidos para int
                
        # Ordenar numericamente
        combinacoes_filtradas.sort(key=lambda x: int(x))
        
        # Registrar quantas combina√ß√µes foram filtradas
        total_combinacoes = len(combinacoes_formatadas)
        total_filtradas = len(combinacoes_filtradas)
        app.logger.info(f'Geradas {total_combinacoes} combina√ß√µes, {total_filtradas} ap√≥s filtrar n√∫meros > 60')
        
        return jsonify({
            "total": total_filtradas,
            "combinacoes": combinacoes_filtradas,
            "formatado_para_excel": True
        })
        
    except ValueError as e:
        app.logger.error(f'Erro nos dados de entrada: {str(e)}')
        return jsonify({"erro": f"Erro nos dados de entrada: {str(e)}"}), 400
    except Exception as e:
        app.logger.error(f'Erro inesperado: {str(e)}')
        return jsonify({"erro": f"Erro inesperado: {str(e)}"}), 500




# Fun√ß√£o otimizada de gerar palpites para a Mega Sena
def gerar_palpites_mega_sena(combinacoes_formatadas, total_palpites=10):
    """
    Gera palpites para a Mega Sena a partir das combina√ß√µes de dois d√≠gitos.
    Cada palpite cont√©m 6 n√∫meros √∫nicos entre 1 e 60.
    
    Args:
        combinacoes_formatadas: Lista de combina√ß√µes de dois d√≠gitos j√° formatadas
        total_palpites: N√∫mero de palpites a serem gerados
        
    Returns:
        Uma lista de palpites, onde cada palpite √© uma lista de 6 n√∫meros √∫nicos
    """
    numeros_unicos = set()
    
    # Extrair n√∫meros das combina√ß√µes de dois d√≠gitos
    for combinacao in combinacoes_formatadas:
        i = 0
        while i < len(combinacao):
            # Tentar extrair um n√∫mero de 2 d√≠gitos
            if i + 1 < len(combinacao):
                try:
                    num_str = combinacao[i:i+2]
                    numero = int(num_str)
                    if 1 <= numero <= 60:  # Garantir que est√° no intervalo da Mega Sena
                        numeros_unicos.add(numero)
                except ValueError:
                    pass
            i += 2  # Avan√ßar para o pr√≥ximo par de d√≠gitos
    
    # Converter o conjunto para lista para facilitar a manipula√ß√£o
    numeros_disponiveis = list(numeros_unicos)
    
    # Se n√£o houver n√∫meros suficientes, complementar com n√∫meros aleat√≥rios
    if len(numeros_disponiveis) < 6:
        numeros_faltantes = set(range(1, 61)) - set(numeros_disponiveis)
        numeros_complementares = random.sample(list(numeros_faltantes), 6 - len(numeros_disponiveis))
        numeros_disponiveis.extend(numeros_complementares)
    
    # Garantir que temos pelo menos 6 n√∫meros
    if len(numeros_disponiveis) < 6:
        raise ValueError("N√£o foi poss√≠vel extrair n√∫meros suficientes das combina√ß√µes")
    
    # Para gera√ß√£o de grandes quantidades, usamos uma abordagem mais eficiente
    if total_palpites > 100:
        return gerar_palpites_grande_quantidade(numeros_disponiveis, total_palpites)
    
    # Para quantidades menores, usamos a abordagem normal
    palpites = []
    tentativas_maximas = total_palpites * 3  # Tentativas extras caso gere duplicatas
    tentativas = 0
    
    while len(palpites) < total_palpites and tentativas < tentativas_maximas:
        tentativas += 1
        
        # Se tivermos muitos n√∫meros dispon√≠veis, podemos gerar mais varia√ß√µes
        if len(numeros_disponiveis) > 15:
            # Escolher 6 n√∫meros aleat√≥rios do conjunto dispon√≠vel
            palpite = sorted(random.sample(numeros_disponiveis, 6))
        else:
            # Para conjuntos menores, podemos precisar de uma abordagem mais criativa
            # Garantir que pelo menos 3 n√∫meros sejam dos dispon√≠veis
            n_fixos = min(3, len(numeros_disponiveis))
            numeros_fixos = random.sample(numeros_disponiveis, n_fixos)
            
            # Complementar com n√∫meros aleat√≥rios entre 1-60 que n√£o estejam nos fixos
            numeros_adicionais = []
            while len(numeros_fixos) + len(numeros_adicionais) < 6:
                novo_num = random.randint(1, 60)
                if novo_num not in numeros_fixos and novo_num not in numeros_adicionais:
                    numeros_adicionais.append(novo_num)
            
            # Juntar e ordenar
            palpite = sorted(numeros_fixos + numeros_adicionais)
        
        # Verificar se esse palpite j√° existe
        palpite_str = ",".join(map(str, palpite))
        palpites_existentes = [",".join(map(str, p)) for p in palpites]
        
        if palpite_str not in palpites_existentes:
            palpites.append(palpite)
    
    # Se n√£o conseguimos gerar palpites suficientes, retornar o que temosconst socketioU
    return palpites

def gerar_palpites_grande_quantidade(numeros_disponiveis, total_palpites):
    """
    M√©todo otimizado para gerar grandes quantidades de palpites.
    Usa um conjunto para verifica√ß√£o r√°pida de duplicatas.
    """
    palpites_set = set()
    palpites = []
    
    alta_variabilidade = len(numeros_disponiveis) >= 15
    
    max_tentativas = total_palpites * 5
    tentativas = 0
    
    while len(palpites) < total_palpites and tentativas < max_tentativas:
        tentativas += 1
        
        if alta_variabilidade:
            if len(numeros_disponiveis) >= 6:
                palpite = tuple(sorted(random.sample(numeros_disponiveis, 6)))
            else:
                numeros_base = list(numeros_disponiveis)
                complementos_necessarios = 6 - len(numeros_base)
                complementos = []
                
                while len(complementos) < complementos_necessarios:
                    num = random.randint(1, 60)
                    if num not in numeros_base and num not in complementos:
                        complementos.append(num)
                
                palpite = tuple(sorted(numeros_base + complementos))
        else:
            n_disponiveis = min(4, len(numeros_disponiveis))
            
            if n_disponiveis > 0:
                numeros_base = random.sample(numeros_disponiveis, n_disponiveis)
            else:
                numeros_base = []
                
            complementos = []
            while len(numeros_base) + len(complementos) < 6:
                num = random.randint(1, 60)
                if num not in numeros_base and num not in complementos:
                    complementos.append(num)
            
            palpite = tuple(sorted(numeros_base + complementos))
        
        if palpite not in palpites_set:
            palpites_set.add(palpite)
            palpites.append(list(palpite))
            
            # A cada 100 palpites, fazer uma pausa para diminuir a carga na CPU
            if len(palpites) % 100 == 0 and len(palpites) < total_palpites:
                time.sleep(0.01)
    
    return palpites

@app.route("/gerar_palpites", methods=["POST"])
def gerar_palpites():
    try:
        dados = request.get_json()
        if not dados:
            app.logger.error('Dados JSON n√£o recebidos ou inv√°lidos')
            return jsonify({"erro": "Dados JSON inv√°lidos ou n√£o fornecidos"}), 400
            
        combinacoes_formatadas = dados.get("combinacoes", [])
        total_palpites = int(dados.get("quantidade", 10))
        
        app.logger.info(f'Gerando {total_palpites} palpites para a Mega Sena.')
        
        # Valida√ß√£o
        if not combinacoes_formatadas or total_palpites <= 0:
            app.logger.warning('Dados de entrada para gera√ß√£o de palpites inv√°lidos')
            return jsonify({"erro": "Dados inv√°lidos"}), 400
        
        # Limitar o n√∫mero m√°ximo de palpites para evitar timeout
        max_palpites = 10000  # Ajuste conforme necess√°rio
        if total_palpites > max_palpites:
            app.logger.warning(f'Solicita√ß√£o de {total_palpites} palpites excede o limite de {max_palpites}')
            total_palpites = max_palpites
        
        # Definir timeout para evitar que o servidor fique bloqueado
        timeout_seconds = 30  # Ajuste conforme necess√°rio
        
        # Usar um timer para limitar o tempo de execu√ß√£o
        start_time = time.time()
        palpites = gerar_palpites_mega_sena(combinacoes_formatadas, total_palpites)
        execution_time = time.time() - start_time
        
        app.logger.info(f'Gerados {len(palpites)} palpites em {execution_time:.2f} segundos')
        
        return jsonify({"total": len(palpites), "palpites": palpites})
    
    except Exception as e:
        app.logger.error(f'Erro inesperado ao gerar palpites: {str(e)}')
        import traceback
        app.logger.error(traceback.format_exc())
        return jsonify({"erro": f"Erro inesperado: {str(e)}"}), 500
        
def validar_digitos_unicos(numeros_str):
    """
    Valida se a entrada cont√©m apenas d√≠gitos √∫nicos (0-9) separados por v√≠rgula.
    N√£o permite repeti√ß√£o de d√≠gitos.
    Retorna uma tupla (v√°lido, mensagem de erro).
    """
    # Remover espa√ßos em branco
    numeros_str = numeros_str.replace(" ", "")
    
    # Verificar se cont√©m apenas d√≠gitos e v√≠rgulas
    import re
    if not re.match(r'^[0-9,]*$', numeros_str):
        return False, "Entrada deve conter apenas d√≠gitos (0-9) e v√≠rgulas."
    
    # Verificar se cada elemento √© um √∫nico d√≠gito
    elementos = numeros_str.split(",")
    for elem in elementos:
        if elem and len(elem) > 1:
            return False, "Cada elemento deve ser um √∫nico d√≠gito (0-9)."
    
    # Verificar se h√° d√≠gitos duplicados
    digitos = [int(elem) for elem in elementos if elem]
    if len(digitos) != len(set(digitos)):
        return False, "N√£o √© permitido repetir d√≠gitos. Use cada d√≠gito apenas uma vez."
    
    # Verificar se todos os d√≠gitos est√£o no intervalo 0-9
    for digito in digitos:
        if digito < 0 or digito > 9:
            return False, "Apenas d√≠gitos entre 0 e 9 s√£o permitidos."
    
    return True, ""    
        

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
	
	<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Combina√ß√µes</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
	<script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
	<script src="{{ url_for('static', filename='js/websocket.js') }}"></script>
	<script src="{{ url_for('static', filename='js/websocket_connect.js') }}"></script>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Calculadora de Combina√ß√µes (Digitos)</h1>
			<p>A tabela abaixo mostra quantas combina√ß√µes ser√° poss√≠vel formar, conforme o total de digitos informado. </p>
			<p>Acesso tamb√©m o modal, para as combina√ß√µes completas.</p>
		<table>
		  <thead>
			<tr>
			  <th>N¬∫ de D√≠gitos</th>
			  <th>Agrupamentos de 2 <small>(Concidere as dezenas g√™meas para o n¬∫ de d√≠gitos)*</small></th>
			  <th>Palpites (Mega Sena)</th>
			</tr>
		  </thead>
		  <tbody>
			<tr>
			  <td>2 *</td>
			  <td>2</td>
			  <td>-</td>
			</tr>
			<tr>
			  <td>3 *</td>
			  <td>6</td>
			  <td>1</td>
			</tr>
			<tr>
			  <td>4 *</td>
			  <td>12</td>
			  <td>2</td>
			</tr>
			<tr>
			  <td>5 *</td>
			  <td>20</td>
			  <td>3</td>
			</tr>
			<tr>
			  <td>6 *</td>
			  <td>30</td>
			  <td>5</td>
			</tr>
			<tr>
			  <td>7 *</td>
			  <td>42</td>
			  <td>7</td>
			</tr>
			<tr>
			  <td>8 *</td>
			  <td>56</td>
			  <td>28</td>
			</tr>
			<tr>
			  <td>9 *</td>
			  <td>72</td>
			  <td>84</td>
			</tr>
			<tr>
			  <td>10 *</td>
			  <td>90</td>
			  <td>210</td>
			</tr>
			<tr>
			  <td>11 *</td>
			  <td>110</td>
			  <td>462</td>
			</tr>
			<tr>
			  <td>12 *</td>
			  <td>132</td>
			  <td>924</td>
			</tr>
            <tr>
              <td>13 *</td>
              <td>156</td>
              <td>1.716</td>
            </tr>
            <tr>
              <td>14 *</td>
              <td>182</td>
              <td>3.003</td>
            </tr>
            <tr>
              <td>15 *</td>
              <td>210</td>
              <td>5.005</td>
            </tr>
            <tr>
              <td>16 *</td>
              <td>240</td>
              <td>8.008</td>
            </tr>
            <tr>
              <td>17 *</td>
              <td>272</td>
              <td>12.376</td>
            </tr>
            <tr>
              <td>18 *</td>
              <td>306</td>
              <td>18.564</td>
            </tr>
            <tr>
              <td>19 *</td>
              <td>342</td>
              <td>27.132</td>
            </tr>
            <tr>
              <td>20 *</td>
              <td>380</td>
              <td>38.760</td>
            </tr>
		  </tbody>
		</table>
		


        <!-- Bot√£o para abrir o modal com a tabela completa -->
        <div class="text-center mt-3 mb-3">
          <button class="btn btn-primary" onclick="abrirModal()">Ver Tabela Completa (at√© 60 d√≠gitos) *</button>
        </div>
        
<hr /><hr />
<table>
	<thead>
	  <tr>
		<th>Quantidade de D√≠gitos</th>
		<th>Combina√ß√µes Poss√≠veis</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
		<td>1</td>
		<td>(0 a 9) 10 </td>
	  </tr>
	  <tr>
		<td>2</td>
		<td>(10¬≤) 100 </td>
	  </tr>
	  <tr>
		<td>3</td>
		<td>(10¬≥) 1.000 </td>
	  </tr>
	  <tr>
		<td>4</td>
		<td>(10‚Å¥) 10.000</td>
	  </tr>
	  <tr>
		<td>5</td>
		<td>(10‚Åµ) 100.000</td>
	  </tr>
	  <tr>
		<td>6</td>
		<td>(10‚Å∂) 1.000.000</td>
	  </tr>
	  <tr>
		<td>7</td>
		<td>(10‚Å∑) 10.000.000</td>
	  </tr>
	  <tr>
		<td>8</td>
		<td>(10‚Å∏) 100.000.000</td>
	  </tr>
	  <tr>
		<td>9</td>
		<td>(10‚Åπ) 1.000.000.000</td>
	  </tr>
	  <tr>
		<td>10</td>
		<td>(10¬π‚Å∞) 10.000.000.000</td>
	  </tr>
	</tbody>
  </table>


			<hr /><hr />
<div class="card">
    <div class="card-body">
        <form id="formCombinacoes" onsubmit="calcularCombinacoes(event)">
            <div class="mb-3">
                <label for="numeros" class="form-label">Digite os n√∫meros (separados por v√≠rgula):</label>
                <input type="text" class="form-control" id="numeros" required placeholder="ex: 1,2,0">
                <div class="error-message" id="numerosError"></div>
            </div>
            
            <div class="mb-3">
                <label for="tamanho" class="form-label">Tamanho do agrupamento:</label>
                <!-- O tamanho do agrupamento √© fixo e n√£o pode ser alterado -->
                <input type="number" class="form-control" id="tamanho" value="2" readonly required>
                <div class="error-message" id="tamanhoError"></div>
            </div>
            
            <button type="submit" class="btn btn-primary">Calcular Combina√ß√µes</button>
        </form>
    </div>
</div>

<div class="mt-4">
		<div class="alert alert-info" id="totalCombinacoes" style="display: none;">
			Total de Combina√ß√µes: <span id="total" class="badge bg-primary fs-4">0</span>
		</div>
		
		<div class="card mt-3" id="resultadoCard" style="display: none;">
			<div class="card-header">
				Combina√ß√µes Encontradas
			</div>
			<div class="card-body resultado-box">
				<div id="combinacoes"></div>
			</div>
		</div>
		
		<hr /><hr />

		<div id="palpitesControle" class="card mt-3" style="display: none;">
		  <div class="card-header bg-success text-white">
			Gerar Palpites para Mega Sena
		  </div>
		  <div class="card-body">
			<div class="row mb-2">
			  <div class="col-12">
				<div class="alert alert-info p-2">
				  <small>Com estes n√∫meros √© poss√≠vel formar at√© <strong id="totalTeorico">0</strong> palpites diferentes para a Mega Sena.</small>
				</div>
			  </div>
			</div>
			<div class="row align-items-center">
			  <div class="col-md-7">
				<label for="quantidadePalpites" class="form-label">Quantidade de palpites a gerar:</label>
				<input type="range" class="form-range" id="quantidadePalpites" min="1" max="100" value="10">
				<div class="d-flex justify-content-between mt-1">
				  <span>1</span>
				  <span class="text-center"><span id="valorQuantidadePalpites">10</span> de <span id="valorMaximo">100</span></span>
				  <span id="maxValue">Max</span>
				</div>
			  </div>
			  <div class="col-md-5">
				<button type="button" class="btn btn-success w-100" onclick="gerarPalpitesMegaSena()">
				  Gerar Palpites
				</button>
			  </div>
			</div>
		  </div>
		</div>


	<!-- O card de palpites com suporte a pagina√ß√£o -->
	<!--
	<div class="card mt-3" id="palpitesCard" style="display: none;">
		<div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
			<div>Palpites para Mega Sena (Total: <span id="totalPalpites">0</span>)</div>
			<div id="paginaInfo" class="badge bg-light text-dark">P√°gina 0 de 0</div>
		</div>
		<div class="card-body resultado-box">
			<div id="palpites"></div>
		</div>
	</div>
	-->
	
	<div class="card mt-3" id="palpitesCard" style="display: none;">
		<div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
			<div>Palpites para Mega Sena (Total: <span id="totalPalpites">0</span>)</div>
			<div>
				<span id="paginaInfo" class="badge bg-light text-dark me-2">Carregando...</span>
				<button id="btnRecarregarPalpites" class="btn btn-sm btn-light" onclick="reiniciarPalpites()" title="Reiniciar carregamento"></button>
			</div>
		</div>
			<div class="card-body resultado-box">
				<div id="palpites"></div>
			</div>
	</div>
	
	<!--
	<div class="card mt-3" id="palpitesCard" style="display: none;">
		<div class="card-header bg-success text-white">
			Palpites para Mega Sena (Total: <span id="totalPalpites">0</span>)
		</div>
		<div class="card-body resultado-box">
			<div id="palpites"></div>
		</div>
	</div>
	-->
	
	
	
</div>
	
	<footer>Feito por: <i>M√°rcio Fernando Maia -  Todos os direitos reservado - 2025</footer>

    <!-- Modal da tabela completa -->
    <div id="modalTabelaCompleta" class="modal-tabela">
      <div class="modal-conteudo">
        <div class="modal-header">
          <h2>Tabela Completa - At√© 60 D√≠gitos</h2>
          <span class="fechar-modal" onclick="fecharModal()">&times;</span>
        </div>
        <div class="table-responsive">
          <table>
            <thead>
              <tr>
                <th>N¬∫ de D√≠gitos</th>
                <th>Agrupamentos de 2</th>
                <th>Palpites (Mega Sena)</th>
              </tr>
            </thead>
            <tbody id="tabelaCompletaBody">
              <!-- Ser√° preenchido via JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <input type="hidden" id="socketioUrl" value="{{ socketio_url }}">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/script.js') }}"></script>

    <!-- Card para processamento ass√≠ncrono -->
    <div class="card mt-3" id="processamentoAssincrono" style="display: none;">
        <div class="card-header bg-info text-white">
            Processamento em Segundo Plano
        </div>
        <div class="card-body">
            <div class="progress mb-3">
                <div id="progressoTarefa" class="progress-bar progress-bar-striped progress-bar-animated" 
                     role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            
            <div id="mensagemTarefa" class="alert alert-info">
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
                <span id="statusTarefa">Iniciando processamento...</span>
            </div>
            
            <div id="controlesTarefa">
                <button id="btnNovoProcessamento" class="btn btn-outline-primary" style="display: none;">
                    Iniciar Novo Processamento
                </button>
            </div>
        </div>
    </div>
	
	<script>
		// Configura√ß√£o do WebSocket
		const socketioUrl = "http://" + window.location.hostname + ":10001";
		const socket = connectWebSocket(socketioUrl);	
	</script>

    <script>
        // Inicializar o Socket.IO quando a p√°gina carregar
        document.addEventListener('DOMContentLoaded', function() {
            try {
                const socketioUrl = document.getElementById('socketioUrl').value || "http://" + window.location.hostname + ":10001";
                console.log("Configurando conex√£o Socket.IO para:", socketioUrl);
                window.socket = connectWebSocket(socketioUrl);
            } catch (e) {
                console.error("Erro ao configurar Socket.IO:", e);
            }
        });
    </script>

</body>
</html>


// scripts.js
// Vari√°veis de controle para pagina√ß√£o
let paginaAtual = 1;
let totalPaginas = 1;
let carregandoPagina = false;
let todosOsPalpites = [];



// Fun√ß√£o para formatar n√∫mero no padr√£o brasileiro
function formatarNumeroParaBR(numero) {
    return numero.toLocaleString('pt-BR');
  }


// Inicializar a valida√ß√£o quando o documento estiver carregado
document.addEventListener("DOMContentLoaded", function() {
    validarEntradaDigitos();
    
    // Tamb√©m adicionar mensagem de instru√ß√£o inicial
    const inputDigitos = document.getElementById("numeros");
    inputDigitos.setAttribute("placeholder", "ex: 0,1,2,3,4,5,6");
    
    // Exibir a div de erro (inicialmente escondida)
    const errorDiv = document.getElementById("numerosError");
    if (!errorDiv) {
        // Se n√£o existir, criar a div
        const div = document.createElement("div");
        div.id = "numerosError";
        div.className = "error-message";
        inputDigitos.parentNode.insertBefore(div, inputDigitos.nextSibling);
    }
});

// Fun√ß√£o para calcular o n√∫mero total de combina√ß√µes poss√≠veis
function calcularTotalCombinacoesPossiveis(n, r) {
  // Fun√ß√£o para calcular fatorial (limita a n√∫meros menores para evitar overflow)
  function fatorial(num) {
    if (num <= 1) return 1;
    let resultado = 1;
    for (let i = 2; i <= num; i++) {
      resultado *= i;
    }
    return resultado;
  }
  
  // Para n√∫meros grandes, usamos uma abordagem mais eficiente
  function calcularCombinacaoGrande(n, r) {
    let resultado = 1;
    // Calcular n! / (n-r)! diretamente
    for (let i = n - r + 1; i <= n; i++) {
      resultado *= i;
    }
    // Dividir por r!
    resultado /= fatorial(r);
    return Math.floor(resultado);
  }
  
  if (n < r) return 0;
  
  // Usar m√©todo apropriado baseado no tamanho dos n√∫meros
  if (n > 20) {
    return calcularCombinacaoGrande(n, r);
  } else {
    return Math.floor(fatorial(n) / (fatorial(r) * fatorial(n - r)));
  }
}

// Fun√ß√£o auxiliar para extrair n√∫meros da lista de combina√ß√µes formatadas
function extrairNumerosUnicos(combinacoes) {
  const numerosUnicos = new Set();
  
  for (const combinacao of combinacoes) {
    // Tentar extrair n√∫meros de 2 d√≠gitos da combina√ß√£o
    let i = 0;
    while (i < combinacao.length) {
      if (i + 1 < combinacao.length) {
        try {
          const numStr = combinacao.substring(i, i+2);
          const numero = parseInt(numStr);
          if (numero >= 1 && numero <= 60) {
            numerosUnicos.add(numero);
          }
        } catch (e) {}
      }
      i += 2;
    }
  }
  
  return [...numerosUnicos];
}




// Fun√ß√£o para calcular combina√ß√µes
// Fun√ß√£o para calcular combina√ß√µes
async function calcularCombinacoes(event) {
    event.preventDefault();
    
    const numeros = document.getElementById("numeros").value;
    const tamanho = document.getElementById("tamanho").value;
    
    try {
        const response = await fetch("/calcular", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ numeros, tamanho })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            // Exibe o total
            document.getElementById("totalCombinacoes").style.display = "block";
            document.getElementById("total").textContent = data.total;
            
            // Exibe as combina√ß√µes
            const combinacoesDiv = document.getElementById("combinacoes");
            
            // Verificar se deve usar formata√ß√£o para Excel
            if (data.formatado_para_excel) {
                // Usar a fun√ß√£o para criar a tabela formatada para Excel
                const tabela = criarTabelaCombinacoes(data.combinacoes);
                combinacoesDiv.innerHTML = ""; // Limpar conte√∫do anterior
                combinacoesDiv.appendChild(tabela);
            } else {
                // Exibi√ß√£o simples como texto
                combinacoesDiv.innerHTML = data.combinacoes.join(" ");
            }
            
            document.getElementById("resultadoCard").style.display = "block";
            
            // Armazenar as combina√ß√µes para uso posterior
            window.combinacoesGeradas = data.combinacoes;
            
            // Verificar se deve mostrar os controles de palpites
            const digitosInput = document.getElementById("numeros").value;
            const digitos = digitosInput.split(",").map(d => d.trim()).filter(d => d);
            const quantidadeDigitos = digitos.length;
            
            // Mostrar controles apenas se tivermos 4 ou mais d√≠gitos
            const palpitesControle = document.getElementById("palpitesControle");
            if (quantidadeDigitos >= 4 && data.total >= 12) {
                palpitesControle.style.display = "block";
                
                // Calcular o total te√≥rico de palpites poss√≠veis
                // Primeiro extrair os n√∫meros √∫nicos das combina√ß√µes geradas
                const numerosUnicosArray = extrairNumerosUnicos(data.combinacoes);
                console.log("N√∫meros √∫nicos extra√≠dos:", numerosUnicosArray);
                
                const totalTeorico = calcularTotalCombinacoesPossiveis(numerosUnicosArray.length, 6);
                console.log("Total te√≥rico calculado:", totalTeorico);
                
                // Mostrar o total te√≥rico na interface formatado no padr√£o brasileiro
                document.getElementById("totalTeorico").textContent = formatarNumeroParaBR(totalTeorico);
                
                // ALTERA√á√ÉO AQUI: Usar totalTeorico como limite m√°ximo sem restri√ß√£o de 1000
                const limiteMaximo = Math.max(1, totalTeorico);
                const rangeInput = document.getElementById("quantidadePalpites");
                rangeInput.max = limiteMaximo;
                rangeInput.value = Math.min(10, limiteMaximo);
                document.getElementById("valorQuantidadePalpites").textContent = formatarNumeroParaBR(parseInt(rangeInput.value));
                
                // Atualizar o texto do m√°ximo formatado no padr√£o brasileiro
                document.getElementById("valorMaximo").textContent = formatarNumeroParaBR(limiteMaximo);
            } else {
                palpitesControle.style.display = "none";
                // Esconder o container de palpites caso esteja vis√≠vel
                document.getElementById("palpitesCard").style.display = "none";
            }
        } else {
            alert(data.erro || "Erro ao calcular combina√ß√µes");
        }
    } catch (error) {
        alert("Erro ao comunicar com o servidor");
        console.error(error);
    }
}



async function gerarPalpitesMegaSena() {
    // Verificar se temos combina√ß√µes geradas
    if (!window.combinacoesGeradas || window.combinacoesGeradas.length === 0) {
        alert("Por favor, gere as combina√ß√µes primeiro.");
        return;
    }
    
    // Obter a quantidade desejada de palpites
    const quantidadePalpites = parseInt(document.getElementById("quantidadePalpites").value);
    
    // Reiniciar estado de pagina√ß√£o
    paginaAtual = 1;
    totalPaginas = 1;
    todosOsPalpites = [];
    carregandoPagina = false;
    
    // Mostrar indicador de carregamento
    document.getElementById("palpitesCard").style.display = "block";
    document.getElementById("palpites").innerHTML = 
        `<div class="alert alert-info">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            Gerando palpites (p√°gina 1)...
        </div>`;
    
    // Carregar a primeira p√°gina
    await carregarPaginaPalpites(quantidadePalpites, 1);
    
    // Adicionar evento de scroll para carregamento infinito
    const palpitesContainer = document.getElementById("palpites");
    palpitesContainer.addEventListener("scroll", function() {
        if (!carregandoPagina && paginaAtual < totalPaginas) {
            // Verificar se estamos pr√≥ximos do fim do scroll
            if (palpitesContainer.scrollHeight - palpitesContainer.scrollTop - palpitesContainer.clientHeight < 200) {
                carregarProximaPagina(quantidadePalpites);
            }
        }
    });
}


async function carregarPaginaPalpites(quantidadePalpites, pagina, itens_por_pagina = 100) {
    try {
        console.log("Iniciando carregamento da p√°gina", pagina);
        carregandoPagina = true;
        
        // Adicionar indicador de carregamento
        document.getElementById("paginaInfo").textContent = `Carregando p√°gina ${pagina}...`;
        
        if (pagina > 1) {
            const loadingElement = document.createElement("div");
            loadingElement.id = "carregando-mais";
            loadingElement.className = "text-center p-3";
            loadingElement.innerHTML = `
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
                <span class="ms-2">Carregando p√°gina ${pagina}...</span>
            `;
            document.getElementById("palpites").appendChild(loadingElement);
        } else {
            // Para a primeira p√°gina, mostrar indicador de carregamento no conte√∫do
            document.getElementById("palpites").innerHTML = `
                <div class="alert alert-info" id="carregando-inicial">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                    Gerando palpites (p√°gina 1)...
                </div>
            `;
        }
        
        // Definir um timeout para a requisi√ß√£o
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 segundos
        
        console.log("Enviando requisi√ß√£o para p√°gina", pagina);
        // Fazer requisi√ß√£o para a API
        const response = await fetch("/gerar_palpites", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ 
                combinacoes: window.combinacoesGeradas,
                quantidade: quantidadePalpites,
                pagina: pagina,
                itens_por_pagina: itens_por_pagina
            }),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        console.log("Resposta recebida:", response.status);
        
        if (!response.ok) {
            throw new Error(`Erro HTTP: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("Dados recebidos:", data);
        
        // Atualizar contadores de pagina√ß√£o
        paginaAtual = data.pagina_atual || pagina;
        totalPaginas = data.total_paginas || 1;
        
        // Remover indicador de carregamento
        const carregandoElement = document.getElementById("carregando-mais");
        if (carregandoElement) {
            carregandoElement.remove();
        }
        
        const carregandoInicial = document.getElementById("carregando-inicial");
        if (carregandoInicial) {
            carregandoInicial.remove();
        }
        
        // Atualizar o total de palpites
        
		// document.getElementById("totalPalpites").textContent = data.total;
		
		// Exibe o total de palpites formatado no padr√£o brasileiro
		document.getElementById("totalPalpites").textContent = formatarNumeroParaBR(data.total);
        
		//document.getElementById("paginaInfo").textContent = `P√°gina ${paginaAtual} de ${totalPaginas}`;
		atualizarStatusPaginacao(`P√°gina ${paginaAtual} de ${totalPaginas}`);
        
        // Adicionar novos palpites √† lista
        todosOsPalpites = todosOsPalpites.concat(data.palpites);
        
        // Limpar o conte√∫do se for a primeira p√°gina
        if (pagina === 1) {
            const palpitesDiv = document.getElementById("palpites");
            
            // Criar tabela
            const table = document.createElement("table");
            table.id = "tabelaPalpites";
            table.className = "table table-striped";
            
            const thead = document.createElement("thead");
            const headerRow = document.createElement("tr");
            
            // Cabe√ßalho numerado de 1 a 6
            for (let i = 1; i <= 6; i++) {
                const th = document.createElement("th");
                th.textContent = `N¬∫ ${i}`;
                headerRow.appendChild(th);
            }
            
            thead.appendChild(headerRow);
            table.appendChild(thead);
            
            // Corpo da tabela
            const tbody = document.createElement("tbody");
            tbody.id = "corpoPalpites";
            table.appendChild(tbody);
            
            // Limpar conte√∫do atual e adicionar a tabela
            palpitesDiv.innerHTML = "";
            palpitesDiv.appendChild(table);
        }
        
        // Adicionar novos palpites √† tabela
        const tbody = document.getElementById("corpoPalpites");
        if (!tbody) {
            console.error("Elemento corpoPalpites n√£o encontrado!");
            return;
        }
        
        data.palpites.forEach((palpite) => {
            const row = document.createElement("tr");
            
            // Cada n√∫mero do palpite em uma c√©lula
            palpite.forEach(numero => {
                const cell = document.createElement("td");
                cell.textContent = numero;
                row.appendChild(cell);
            });
            
            tbody.appendChild(row);
        });
        
        // Adicionar bot√£o "Carregar Mais" se houver mais p√°ginas
        if (paginaAtual < totalPaginas) {
            const loadMoreBtn = document.createElement("div");
            loadMoreBtn.id = "carregarMaisBtn";
            loadMoreBtn.className = "text-center p-3";
            loadMoreBtn.innerHTML = `
                <button class="btn btn-outline-primary" onclick="carregarProximaPagina(${quantidadePalpites})">
                    Carregar mais palpites
                </button>
                <div class="text-muted small mt-1">Mostrando ${todosOsPalpites.length} de ${data.total} palpites</div>
            `;
            document.getElementById("palpites").appendChild(loadMoreBtn);
        }
        
    } catch (error) {
        console.error("Erro ao carregar palpites:", error);
        
        // Mostrar mensagem de erro
        const errorElement = document.createElement("div");
        errorElement.className = "alert alert-danger mt-3";
        errorElement.innerHTML = `
            <strong>Erro ao carregar palpites:</strong> ${error.message}
            <button class="btn btn-sm btn-outline-danger mt-2" onclick="carregarPaginaPalpites(${quantidadePalpites}, ${pagina})">
                Tentar novamente
            </button>
        `;
        
        // Remover indicador de carregamento se existir
        const carregandoElement = document.getElementById("carregando-mais");
        if (carregandoElement) {
            carregandoElement.replaceWith(errorElement);
        } else {
            document.getElementById("palpites").appendChild(errorElement);
        }
    } finally {
        carregandoPagina = false;
    }
}

function carregarProximaPagina(quantidadePalpites) {
    if (!carregandoPagina && paginaAtual < totalPaginas) {
        // Remover bot√£o "Carregar Mais" se existir
        const loadMoreBtn = document.getElementById("carregarMaisBtn");
        if (loadMoreBtn) {
            loadMoreBtn.remove();
        }
        
        // Carregar pr√≥xima p√°gina
        carregarPaginaPalpites(quantidadePalpites, paginaAtual + 1);
    }
}


document.addEventListener("DOMContentLoaded", function() {
    const rangeInput = document.getElementById("quantidadePalpites");
    const valorSpan = document.getElementById("valorQuantidadePalpites");
    
    if (rangeInput && valorSpan) {
        rangeInput.addEventListener("input", function() {
            valorSpan.textContent = formatarNumeroParaBR(parseInt(this.value));
        });
    }
});

// Fun√ß√µes para o modal da tabela completa
function formatarNumero(numero) {
  return numero.toLocaleString('pt-BR');
}

function abrirModal() {
  const modal = document.getElementById('modalTabelaCompleta');
  const tbody = document.getElementById('tabelaCompletaBody');
  
  // Limpar conte√∫do anterior
  tbody.innerHTML = '';
  
  // Preencher com dados de 2 a 60
  for (let digitos = 2; digitos <= 60; digitos++) {
    // Calcular agrupamentos de 2
    const agrupamentos = digitos * (digitos - 1);
    
    // Calcular palpites para Mega Sena
    let palpites;
    if (digitos < 6) {
      // Valores especiais para menos de 6 d√≠gitos
      palpites = digitos === 2 ? "-" : digitos === 3 ? "1" : digitos === 4 ? "2" : "3";
    } else {
      // Para 6 ou mais d√≠gitos, usamos C(n,6)
      const valor = calcularTotalCombinacoesPossiveis(digitos, 6);
      palpites = valor > 999 ? formatarNumero(valor) : valor;
    }
    
    // Criar a linha da tabela
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${digitos}</td>
      <td>${formatarNumero(agrupamentos)}</td>
      <td>${palpites}</td>
    `;
    
    tbody.appendChild(tr);
  }
  
  // Exibir o modal
  modal.style.display = 'block';
}

function fecharModal() {
  document.getElementById('modalTabelaCompleta').style.display = 'none';
}

// Fechar o modal quando o usu√°rio clicar fora dele
window.onclick = function(event) {
  const modal = document.getElementById('modalTabelaCompleta');
  if (event.target === modal) {
    modal.style.display = 'none';
  }
}

// Fechar o modal quando pressionar ESC
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    document.getElementById('modalTabelaCompleta').style.display = 'none';
  }
});

// Certifique-se de que esta vari√°vel global √© inicializada
window.combinacoesGeradas = [];



// Fun√ß√£o para validar entrada de d√≠gitos
function validarEntradaDigitos() {
    const inputDigitos = document.getElementById("numeros");
    const errorDiv = document.getElementById("numerosError");
    
    // Validar o padr√£o enquanto o usu√°rio digita
    inputDigitos.addEventListener("input", function(e) {
        const valor = e.target.value;
        
        // Remover espa√ßos em branco
        const valorSemEspacos = valor.replace(/\s/g, "");
        
        // Verificar se cont√©m apenas d√≠gitos (0-9) e v√≠rgulas
        const regex = /^[0-9,]*$/;
        if (!regex.test(valorSemEspacos)) {
            errorDiv.textContent = "Por favor, insira apenas d√≠gitos (0-9) separados por v√≠rgulas.";
            errorDiv.style.display = "block";
            return;
        }
        
        // Verificar se tem n√∫meros de dois d√≠gitos (sem v√≠rgula entre eles)
        const digitos = valorSemEspacos.split(",");
        for (const digito of digitos) {
            if (digito.length > 1) {
                errorDiv.textContent = "Cada d√≠gito deve ser separado por v√≠rgula. Insira apenas um d√≠gito por vez (0-9).";
                errorDiv.style.display = "block";
                return;
            }
        }
        
        // Verificar d√≠gitos duplicados e se est√£o no intervalo 0-9
        const digitosNumericos = digitos.filter(d => d !== "").map(d => parseInt(d, 10));
        const digitosUnicos = new Set(digitosNumericos);
        
        if (digitosNumericos.length > digitosUnicos.size) {
            errorDiv.textContent = "N√£o √© permitido repetir d√≠gitos. Use cada d√≠gito apenas uma vez.";
            errorDiv.style.display = "block";
            return;
        }
        
        // Verificar se todos os d√≠gitos est√£o no intervalo 0-9
        for (const digito of digitosNumericos) {
            if (digito < 0 || digito > 9) {
                errorDiv.textContent = "Apenas d√≠gitos entre 0 e 9 s√£o permitidos.";
                errorDiv.style.display = "block";
                return;
            }
        }
        
        // Se passou em todas as valida√ß√µes
        errorDiv.style.display = "none";
    });
    
    // Validar tamb√©m no evento de submiss√£o do formul√°rio
    document.getElementById("formCombinacoes").addEventListener("submit", function(e) {
        const valor = inputDigitos.value;
        const valorSemEspacos = valor.replace(/\s/g, "");
        
        // Verificar se cont√©m apenas d√≠gitos (0-9) e v√≠rgulas
        const regex = /^[0-9,]*$/;
        if (!regex.test(valorSemEspacos)) {
            e.preventDefault();
            errorDiv.textContent = "Por favor, insira apenas d√≠gitos (0-9) separados por v√≠rgulas.";
            errorDiv.style.display = "block";
            return false;
        }
        
        // Verificar se tem n√∫meros de dois d√≠gitos (sem v√≠rgula entre eles)
        const digitos = valorSemEspacos.split(",");
        for (const digito of digitos) {
            if (digito.length > 1) {
                e.preventDefault();
                errorDiv.textContent = "Cada d√≠gito deve ser separado por v√≠rgula. Insira apenas um d√≠gito por vez (0-9).";
                errorDiv.style.display = "block";
                return false;
            }
        }
        
        // Verificar d√≠gitos duplicados e se est√£o no intervalo 0-9
        const digitosNumericos = digitos.filter(d => d !== "").map(d => parseInt(d, 10));
        const digitosUnicos = new Set(digitosNumericos);
        
        if (digitosNumericos.length > digitosUnicos.size) {
            e.preventDefault();
            errorDiv.textContent = "N√£o √© permitido repetir d√≠gitos. Use cada d√≠gito apenas uma vez.";
            errorDiv.style.display = "block";
            return false;
        }
        
        // Verificar se todos os d√≠gitos est√£o no intervalo 0-9
        for (const digito of digitosNumericos) {
            if (digito < 0 || digito > 9) {
                e.preventDefault();
                errorDiv.textContent = "Apenas d√≠gitos entre 0 e 9 s√£o permitidos.";
                errorDiv.style.display = "block";
                return false;
            }
        }
        
        // Se passou em todas as valida√ß√µes
        return true;
    });
}

// Fun√ß√£o para criar tabela formatada para Excel
function criarTabelaCombinacoes(combinacoes) {
    // Filtrar para remover completamente n√∫meros acima de 60
    const combinacoesFiltradas = combinacoes.filter(comb => {
        const num = parseInt(comb);
        return num > 0 && num <= 60; // Garantir que esteja no intervalo 1-60
    });
    
    // Ordenar numericamente (n√£o alfabeticamente)
    combinacoesFiltradas.sort((a, b) => parseInt(a) - parseInt(b));
    
    // Configurar tabela com exatos 6 n√∫meros por linha (padr√£o Mega Sena)
    const numeroColunas = 6;
    const numeroLinhas = Math.ceil(combinacoesFiltradas.length / numeroColunas);
    
    const tabela = document.createElement('table');
    tabela.className = 'table table-bordered tabela-excel';
    
    const tbody = document.createElement('tbody');
    let index = 0;
    
    for (let i = 0; i < numeroLinhas; i++) {
        const row = document.createElement('tr');
        
        for (let j = 0; j < numeroColunas; j++) {
            const cell = document.createElement('td');
            
            if (index < combinacoesFiltradas.length) {
                const num = parseInt(combinacoesFiltradas[index]);
                
                // Formatar com zero √† esquerda para n√∫meros < 10
                cell.textContent = num < 10 ? `0${num}` : num;
                cell.className = 'celula-excel';
            } else {
                // C√©lula vazia para completar a linha
                cell.innerHTML = '&nbsp;';
            }
            
            row.appendChild(cell);
            index++;
        }
        
        tbody.appendChild(row);
    }
    
    tabela.appendChild(tbody);
    
    // Criar cont√™iner para a tabela e bot√£o de c√≥pia
    const divContainer = document.createElement('div');
    divContainer.className = 'tabela-container';
    
    const botaoCopiar = document.createElement('button');
    botaoCopiar.className = 'btn btn-sm btn-outline-primary mt-2';
    botaoCopiar.innerHTML = 'Copiar para √°rea de transfer√™ncia';
    botaoCopiar.onclick = function() {
        copiarTabelaParaClipboard(combinacoesFiltradas);
    };
    
    divContainer.appendChild(tabela);
    divContainer.appendChild(botaoCopiar);
    
    return divContainer;
}

// Fun√ß√£o melhorada para copiar para a √°rea de transfer√™ncia
function copiarTabelaParaClipboard(combinacoes) {
    // Formatar para colar no Excel (tabs entre colunas, nova linha entre linhas)
    const numeroColunas = 6;
    let textoFormatado = '';
    
    for (let i = 0; i < combinacoes.length; i++) {
        const num = parseInt(combinacoes[i]);
        // Formatar com zero √† esquerda para n√∫meros < 10
        textoFormatado += (num < 10 ? `0${num}` : num);
        
        // Adicionar tab ou nova linha
        if ((i + 1) % numeroColunas === 0) {
            textoFormatado += '\n'; // Nova linha ap√≥s cada 6 n√∫meros
        } else {
            textoFormatado += '\t'; // Tab entre colunas
        }
    }
    
    // M√©todo 1: Tenta usar a API Clipboard moderna
    if (navigator.clipboard && window.isSecureContext) {
        try {
            navigator.clipboard.writeText(textoFormatado)
                .then(() => mostrarMensagemSucesso())
                .catch((err) => {
                    console.error('Erro ao usar clipboard API:', err);
                    usarMetodoAlternativo();
                });
        } catch (err) {
            console.error('Exce√ß√£o ao usar clipboard API:', err);
            usarMetodoAlternativo();
        }
    } else {
        // M√©todo alternativo para navegadores sem suporte √† API Clipboard
        usarMetodoAlternativo();
    }
    
    // Fun√ß√£o para usar o m√©todo alternativo (textarea + execCommand)
    function usarMetodoAlternativo() {
        try {
            const textArea = document.createElement('textarea');
            textArea.value = textoFormatado;
            textArea.style.position = 'fixed';
            textArea.style.left = '0';
            textArea.style.top = '0';
            textArea.style.opacity = '0';
            textArea.style.pointerEvents = 'none';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                mostrarMensagemSucesso();
            } else {
                mostrarAreaSelecao();
            }
        } catch (err) {
            console.error('Erro ao copiar usando execCommand:', err);
            mostrarAreaSelecao();
        }
    }
    
    // Fun√ß√£o para mostrar √°rea de sele√ß√£o manual
    function mostrarAreaSelecao() {
        // Criar uma √°rea de texto vis√≠vel que o usu√°rio pode selecionar manualmente
        const divSelecao = document.createElement('div');
        divSelecao.className = 'area-selecao mt-3 p-3 border bg-light';
        divSelecao.innerHTML = `
            <p class="mb-2">N√£o foi poss√≠vel copiar automaticamente. Selecione o texto abaixo e use Ctrl+C para copiar:</p>
            <pre class="border p-2 bg-white" style="white-space: pre-wrap; word-break: break-all;">${textoFormatado}</pre>
            <button class="btn btn-sm btn-secondary mt-2" onclick="this.parentNode.remove()">Fechar</button>
        `;
        document.getElementById('combinacoes').appendChild(divSelecao);
    }
    
    // Fun√ß√£o para mostrar mensagem de sucesso
    function mostrarMensagemSucesso() {
        const message = document.createElement('div');
        message.className = 'alert alert-success mt-2';
        message.textContent = 'Combina√ß√µes copiadas para a √°rea de transfer√™ncia!';
        document.getElementById('combinacoes').appendChild(message);
        
        // Remover mensagem ap√≥s 3 segundos
        setTimeout(() => {
            message.remove();
        }, 3000);
    }
}



document.addEventListener("DOMContentLoaded", function() {
    // Garantir que o tamanho do agrupamento seja fixo em 2
    const tamanhoInput = document.getElementById("tamanho");
    tamanhoInput.value = "2";
    tamanhoInput.setAttribute("readonly", "readonly");
    tamanhoInput.style.backgroundColor = "#f8f9fa"; // Fundo cinza para indicar que √© somente leitura
    
    // Inicializar outras fun√ß√µes
    validarEntradaDigitos();
    
    // Tamb√©m adicionar mensagem de instru√ß√£o inicial
    const inputDigitos = document.getElementById("numeros");
    inputDigitos.setAttribute("placeholder", "ex: 0,1,2,3,4,5");
});


// Fun√ß√£o para gerar palpites (modificada para suportar ass√≠ncrono e pagina√ß√£o)
async function gerarPalpitesMegaSena() {
    // Verificar se temos combina√ß√µes geradas
    if (!window.combinacoesGeradas || window.combinacoesGeradas.length === 0) {
        alert("Por favor, gere as combina√ß√µes primeiro.");
        return;
    }
    
    // Obter a quantidade desejada de palpites
    const quantidadePalpites = parseInt(document.getElementById("quantidadePalpites").value);
    
    // Reiniciar estado de pagina√ß√£o
    paginaAtual = 1;
    totalPaginas = 1;
    todosOsPalpites = [];
    carregandoPagina = false;
    
    // Mostrar indicador de carregamento
    document.getElementById("palpitesCard").style.display = "block";
    
    // Garantir que o elemento de informa√ß√£o de pagina√ß√£o existe
    const cardHeader = document.querySelector("#palpitesCard .card-header");
    if (!document.getElementById("paginaInfo")) {
        const paginaInfoElement = document.createElement("div");
        paginaInfoElement.id = "paginaInfo";
        paginaInfoElement.className = "badge bg-light text-dark";
        paginaInfoElement.textContent = "Carregando...";
        cardHeader.appendChild(paginaInfoElement);
    } else {
        document.getElementById("paginaInfo").textContent = "Carregando...";
    }
    
    // Mostrar indicador no conte√∫do
    document.getElementById("palpites").innerHTML = 
        `<div class="alert alert-info">
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            Gerando palpites (p√°gina 1)...
        </div>`;
    
    try {
        // Adicionar um timeout maior para a requisi√ß√£o
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 300000);
        
        const response = await fetch("/gerar_palpites", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ 
                combinacoes: window.combinacoesGeradas,
                quantidade: quantidadePalpites
            }),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId); // Limpar o timeout se a requisi√ß√£o completar antes
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error("Erro na resposta:", response.status, errorText);
            throw new Error(`Erro do servidor: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Exibe o total de palpites
        document.getElementById("totalPalpites").textContent = data.total;
        
        // Exibe os palpites
        const palpitesDiv = document.getElementById("palpites");
        palpitesDiv.innerHTML = "";
        
        // Criando tabela de palpites
        const table = document.createElement("table");
        table.className = "table table-striped";
        
        const thead = document.createElement("thead");
        const headerRow = document.createElement("tr");
        
        // Cabe√ßalho numerado de 1 a 6
        for (let i = 1; i <= 6; i++) {
            const th = document.createElement("th");
            th.textContent = `N¬∫ ${i}`;
            headerRow.appendChild(th);
        }
        
        thead.appendChild(headerRow);
        table.appendChild(thead);
        
        const tbody = document.createElement("tbody");
        
        // Adicionar cada palpite como uma linha
        data.palpites.forEach((palpite, index) => {
            const row = document.createElement("tr");
            
            // Cada n√∫mero do palpite em uma c√©lula
            palpite.forEach(numero => {
                const cell = document.createElement("td");
                cell.textContent = numero;
                row.appendChild(cell);
            });
            
            tbody.appendChild(row);
        });
        
        table.appendChild(tbody);
        palpitesDiv.appendChild(table);
        
        // Exibe o card de palpites
        document.getElementById("palpitesCard").style.display = "block";
        
    } catch (error) {
        console.error("Erro completo:", error);
        
        // Mostrar uma mensagem de erro mais informativa
        const palpitesDiv = document.getElementById("palpites");
        palpitesDiv.innerHTML = `
            <div class="alert alert-danger">
                <strong>Erro ao gerar palpites:</strong> ${error.message || 'Erro de comunica√ß√£o com o servidor'}
                <hr>
                <small>Tente reduzir o n√∫mero de palpites solicitados ou tente novamente mais tarde.</small>
            </div>
        `;
        
        document.getElementById("palpitesCard").style.display = "block";
    }
}


// Fun√ß√£o para polling (backup caso WebSockets n√£o esteja dispon√≠vel)
function iniciarPolling(taskId) {
    const intervalId = setInterval(async () => {
        try {
            const response = await fetch(`/verificar_tarefa/${taskId}`);
            const data = await response.json();
            
            // Simular atualiza√ß√£o de WebSocket
            atualizarProgressoTarefa({
                status: data.status,
                progress: Math.floor((data.current / data.total) * 100),
                message: data.status,
                result: data.resultado
            });
            
            // Se conclu√≠do ou falhou, parar o polling
            if (data.status === 'conclu√≠do' || data.status === 'falha') {
                clearInterval(intervalId);
            }
        } catch (error) {
            console.error("Erro no polling:", error);
        }
    }, 2000); // Verificar a cada 2 segundos
}

// Fun√ß√£o para exibir os palpites
function exibirPalpites(palpites) {
    const palpitesDiv = document.getElementById("palpites");
    palpitesDiv.innerHTML = "";
    
    // Criando tabela de palpites
    const table = document.createElement("table");
    table.className = "table table-striped";
    
    const thead = document.createElement("thead");
    const headerRow = document.createElement("tr");
    
    // Cabe√ßalho numerado de 1 a 6
    for (let i = 1; i <= 6; i++) {
        const th = document.createElement("th");
        th.textContent = `N¬∫ ${i}`;
        headerRow.appendChild(th);
    }
    
    thead.appendChild(headerRow);
    table.appendChild(thead);
    
    const tbody = document.createElement("tbody");
    
    // Adicionar cada palpite como uma linha
    palpites.forEach((palpite) => {
        const row = document.createElement("tr");
        
        // Cada n√∫mero do palpite em uma c√©lula
        palpite.forEach(numero => {
            const cell = document.createElement("td");
            cell.textContent = numero;
            row.appendChild(cell);
        });
        
        tbody.appendChild(row);
    });
    
    table.appendChild(tbody);
    palpitesDiv.appendChild(table);
}

// Event handler para o bot√£o de novo processamento
document.addEventListener("DOMContentLoaded", function() {
    const btnNovo = document.getElementById("btnNovoProcessamento");
    if (btnNovo) {
        btnNovo.addEventListener("click", function() {
            // Esconder o card de processamento
            document.getElementById("processamentoAssincrono").style.display = "none";
            // Limpar o task ID atual
            if (typeof currentTaskId !== 'undefined') {
                currentTaskId = null;
            }
        });
    }
});

function reiniciarPalpites() {
    // Limpar estado atual
    todosOsPalpites = [];
    paginaAtual = 1;
    totalPaginas = 1;
    carregandoPagina = false;
    
    // Obter a quantidade de palpites atual
    const quantidadePalpites = parseInt(document.getElementById("quantidadePalpites").value);
    
    // Reiniciar a visualiza√ß√£o
    document.getElementById("paginaInfo").textContent = "Reiniciando...";
    document.getElementById("palpites").innerHTML = "";
    
    // Iniciar carregamento novamente
    carregarPaginaPalpites(quantidadePalpites, 1);
}
function atualizarStatusPaginacao(mensagem) {
    const paginaInfoElement = document.getElementById("paginaInfo");
    if (paginaInfoElement) {
        paginaInfoElement.textContent = mensagem;
    }
}


// Alternativa para copiar quando a API Clipboard n√£o est√° dispon√≠vel
function copiarTabelaAlternativo(combinacoes) {
    // Criar um elemento textArea tempor√°rio
    const textArea = document.createElement('textarea');
    
    // Formatar dados
    const numeroColunas = 6;
    let textoFormatado = '';
    
    for (let i = 0; i < combinacoes.length; i++) {
        const num = parseInt(combinacoes[i]);
        textoFormatado += (num < 10 ? `0${num}` : num);
        
        if ((i + 1) % numeroColunas === 0) {
            textoFormatado += '\n';
        } else {
            textoFormatado += '\t';
        }
    }
    
    // Configurar e adicionar textArea
    textArea.value = textoFormatado;
    document.body.appendChild(textArea);
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    
    // Selecionar e copiar
    textArea.select();
    document.execCommand('copy');
    
    // Remover o elemento
    document.body.removeChild(textArea);
    
    // Feedback
    alert('Combina√ß√µes copiadas para a √°rea de transfer√™ncia!');
}

/* Estilos para pagina√ß√£o e carregamento infinito */
.resultado-box {
    max-height: 500px; /* Aumente a altura m√°xima */
    overflow-y: auto;
    padding: 15px;
    font-family: monospace;
    font-size: 16px;
    line-height: 2;
    position: relative; /* Para posicionar o bot√£o de carregar mais */
}
/* Bot√£o de carregar mais */
#carregarMaisBtn {
    padding: 15px;
    margin-top: 10px;
    border-top: 1px solid #eee;
}

/* Indicador de pagina√ß√£o */
#paginaInfo {
    font-size: 0.9rem;
    padding: 5px 10px;
}

/* Estilo para tabela Excel */
.resultado-box table {
  width: 100%;
  border-collapse: collapse;
}

.resultado-box table td {
  border: 1px solid #ddd;
  text-align: center;
  padding: 8px;
  width: 16.66%; /* Para 6 colunas */
}

.celula-excel {
  user-select: all; /* Facilita a sele√ß√£o do conte√∫do */
  cursor: pointer;
}

.celula-excel:hover {
  background-color: #e9ecef;
}

/* Estilo para mensagens de erro */
.error-message {
  color: #dc3545;
  margin-top: 5px;
  display: none;
}

.numero {
  display: inline-block;
  padding: 5px 10px;
  margin: 2px;
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 4px;
}

.error-message {
  color: #dc3545;
  margin-top: 5px;
  display: none;
}

.btn-primary {
  display: inline-block;
  text-align: center;
}

footer {
  color: #161515;
  text-align: center;
  padding: 5px;
  margin-bottom: auto;
  margin-top: 10px; /* Espa√ßo acima do rodap√© */
}


/* Estilos para o modal da tabela completa */
.modal-tabela {
  display: none;
  position: fixed;
  z-index: 9999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0,0,0,0.4);
}

.modal-conteudo {
  background-color: #fefefe;
  margin: 2% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 90%;
  max-width: 900px;
  max-height: 90vh;
  overflow-y: auto;
  border-radius: 5px;
}

.fechar-modal {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.fechar-modal:hover,
.fechar-modal:focus {
  color: black;
  text-decoration: none;
}

.modal-header {
  position: sticky;
  top: 0;
  background-color: white;
  z-index: 10;
  padding-bottom: 10px;
  margin-bottom: 10px;
  border-bottom: 1px solid #ddd;
}

table {
  width: 100%;
  border-collapse: collapse;
  font-family: Arial, sans-serif;
}

thead {
  background-color: #007acc;
  color: white;
}

th, td {
  border: 1px solid #005f99;
  padding: 10px;
  text-align: center;
}

tbody tr:nth-child(even) {
  background-color: #cce5ff;
}

tbody tr:nth-child(odd) {
  background-color: #e6f2ff;
}

tbody tr:hover {
  background-color: #99ccff;
}
/* Estilos para a tabela Excel */
.tabela-excel {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
  table-layout: fixed; /* Garante que todas as c√©lulas tenham a mesma largura */
}

.tabela-excel td {
  border: 1px solid #ddd;
  text-align: center;
  padding: 8px;
  width: 16.66%; /* Exatamente 6 colunas de tamanho igual */
  height: 40px;
  vertical-align: middle;
  font-weight: 500;
  font-family: 'Courier New', monospace; /* Para melhor alinhamento */
}

/* Estilo especial para facilitar a sele√ß√£o do conte√∫do */
.celula-excel {
  user-select: all; /* Facilita a sele√ß√£o do conte√∫do */
  cursor: pointer;
  position: relative;
}

/* Feedback visual ao passar o mouse */
.celula-excel:hover {
  background-color: #e9ecef;
}

/* Estilo para quando a c√©lula √© clicada (selecionada) */
.celula-excel:active {
  background-color: #c0d8e8;
}

/* Estilos para as mensagens de erro */
.error-message {
  color: #dc3545;
  margin-top: 5px;
  font-size: 0.9rem;
  display: none;
  padding: 5px;
  border-radius: 3px;
  background-color: rgba(220, 53, 69, 0.1);
}
#tamanho {
    background-color: #f8f9fa;
    cursor: not-allowed;
}
/* Adicione este CSS ao seu arquivo style.css */
.tabela-excel {
  user-select: text !important;
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
}

.tabela-excel td {
  user-select: text !important;
  -webkit-user-select: text !important;
  -moz-user-select: text !important;
  -ms-user-select: text !important;
  cursor: text !important;
}

/* Aumentar a √°rea selecion√°vel da c√©lula */
.celula-excel {
  padding: 8px 12px !important;
  min-width: 40px;
}


@media only screen and (max-width: 600px) {
  .card-body {
    text-align: center;
  }

  button {
    display: inline-block;
  }

  footer {
    color: #f00303;
    font-style: italic;
  }
}
